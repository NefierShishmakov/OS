pthread_cancel(pthread_t thread):
       Функция pthread_cancel() отправляет запрос на отмену
       потока, который указан как thread. Реагирует ли и когда целевой поток на
       запрос на отмену зависит от двух атрибутов, которые находятся под
       управление этим потоком: "cancelability state", "cancelation type".

       "cancelability state", которое определяется при помощи pthread_setcancelstate(), 
       может быть включен - (если мы создаём поток с атрибутами по умолчанию) или отключен.
       
       Дальше под "отменой" понимается "cancelability state"
        
       Если в потоке отключена отмена,
       то запрос на отмену остается в очереди до тех пор, пока поток
       включает отмену. Если в потоке включена отмена, то
       его "cancellation type" определяет, когда происходит отмена.

       "cancelation type", который определяется при помощи pthread_setcanceltype(), 
       может быть либо асинхронным, либо отложенным - (если мы создаём поток с атрибутами по умолчанию). 
       Асинхронная отменяемость означает
       что поток можно отменить в любой момент (обычно сразу,
       но система этого не гарантирует). Отложенная отмена
       означает, что отмена будет отложена до тех пор, пока поток не вызывет
       точку отмены (cancellation point). Под точкой отмены понимается функция.
       В моём случае точкой отмены является функция printf();

       При выполнении запроса на отмену выполняются следующие шаги.
       происходят для потока (в этом порядке):

       1. clean-up handlers are popped (в обратном порядке
          порядке, в котором они были запушены) и вызываются. 
          clean-up handlers - это функции, которые автоматический вызываются, когда поток отменён.
          
       2. Деструкторы данных, специфичные для потока, вызываются в неопределённом порядке.

       3. Поток завершается. Т.е. вызывается pthread_exit()

       Все шаги выполняются асинхронно, по отношению к pthread_cancel() 
       Успешный статус возврата pthread_cancel() максимум говорит нам о том, что 
       запрос на отмену был успешно поставлен в очередь. Т.е. успешный статус возврата не гарантирует нам того, 
       что поток был отменён. 

       После того как отменённый поток завершился, мы можем вызвать pthread_join(void **retval), 
       для того чтобы получить в качестве **retval = PTHREAD_CANCELED - чтобы удостовериться, что
       поток был успешно завершён.
       
       Вызов функции pthread_join() - единственный способ узнать, что отмена прошла успешно.

       Возвращаемые значения:
              В случае успеха, pthread_cancel - возвращает 0, в случае ошибки, он возвращает код ошибки.

       Ошибки:
              ESRCH - нет такого потока с id = thread.