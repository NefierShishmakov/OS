pthread_cancel(pthread_t thread):
Эта функция принудительно завершает нить, у которой id = thread.
        Момент, в который нить получает сообщение о попытке прервать ее исполнение функцией pthread_cancel(3C) 
        контролируется атрибутами нити, известными как cancel state и cancel type.
Cancel state (состояние прерывания) определяет, разрешено ли прерывание нити как таковое. 
Т.е. этот атрибут может иметь два значения – разрешено или запрещено. 
Если прерывание разрешено, нить немедленно получает сообщение о попытке ее прервать 
(хотя, в зависимости от cancel type, может отреагировать на это сообщение лишь через некоторое время). Если прерывание запрещено, попытки прерывания нити накапливаются. После того, как прерывания все-таки разрешат, нить получит сигналы о накопившихся попытках.
Переключение состояния прерывания осуществляется функцией pthread_setcancelstate(3C). 
Первый параметр этой функции входной и может принимать значения PTHREAD_CANCEL_ENABLE (прерывание разрешено) и 
PTHREAD_CANCEL_DISABLE (прерывание запрещено). 
Эти значения – препроцессорные макроопределения, содержащиеся в файле pthread.h(3HEAD). Вызов функции с другими значениями первого параметра приведет к ошибке EINVAL. 
Второй параметр функции – выходной, содержит указатель на переменную, в которой будет размещено старое значение типа прерывания. В качестве этого указателя можно передать NULL, в этом случае старое значение состояния будет потеряно. 
По умолчанию, нить создается с разрешенными прерываниями.
Cancel type (тип прерывания) определяет, в какие моменты нить проверяет сообщения о прерываниях. Этот атрибут может принимать два значения – PTHREAD_CANCEL_DEFERRED (отложенное прерывание) и PTHREAD_CANCEL_ASYNCHRONOUS (асинхронное прерывание). 
По умолчанию, нить создается с отложенным типом прерываний. Что означает каждое из возможных значений этого атрибута, описывается далее в этом разделе.
Установка типа прерывания осуществляется функцией pthread_setcanceltype(3C). 
Схема передачи параметров этой функции аналогична pthread_setcancelstate(3C).

Асинхронное прерывание означает, что библиотека прерывает нить как можно скорее 
(хотя во многих ситуациях не удается гарантировать, чтобы это происходило точно в тот момент, 
когда другая нить вызвала pthread_cancel(3C)).

Отложенное прерывание означает, что нить получает сообщение о прерывании лишь в определенные моменты, 
известные как точки прерывания (cancellation point). В данном случае моей точкой прерывания является printf()

Когда запрос об отмене выполняются, для потока выполняются следующие шаги именно в этом порядке:

       1. clean-up handlers are popped (в обратном порядке
          порядке, в котором они были запушены) и вызываются. 
          clean-up handlers - это функции, которые автоматический вызываются, когда поток отменён.
          
       2. Деструкторы данных, специфичные для потока, вызываются в неопределённом порядке.

       3. Поток завершается. Т.е. вызывается pthread_exit()

       Все шаги выполняются асинхронно, по отношению к pthread_cancel() 
       Успешный статус возврата pthread_cancel() максимум говорит нам о том, что 
       запрос на отмену был успешно поставлен в очередь. Т.е. успешный статус возврата не гарантирует нам того, 
       что поток был отменён. 

       После того как отменённый поток завершился, мы можем вызвать pthread_join(void **retval), 
       для того чтобы получить в качестве **retval = PTHREAD_CANCELED - чтобы удостовериться, что
       поток был успешно завершён.
       
       Вызов функции pthread_join() - единственный способ узнать, что отмена прошла успешно.

       Возвращаемые значения:
              В случае успеха, pthread_cancel - возвращает 0, в случае ошибки, он возвращает код ошибки.

       Ошибки:
              ESRCH - нет такого потока с id = thread.
