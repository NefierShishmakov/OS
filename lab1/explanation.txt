pthread_create(pthread_t *restrict thread,
                          const pthread_attr_t *restrict attr,
                          void *(*start_routine)(void *),
                          void *restrict arg):
                           
       Функция pthread_create() запускает новый поток в вызывающем процессе.
       Новый поток начинает выполнение, вызывая start_routine(), arg передается как единственный аргумент
       в start_routine().
       attr аргумент указывает на pthread_attr_t структуру, чьё содержимое используется во время создание потока, 
       для того чтобы задать атрибуты для нового потока. Если этот аргумент равен NULL, то используются атрибуты 
       по умолчанию.
       Эта структура инициализируется при помощи pthread_attr_init().
       Перед выходом, успешный вызов pthread_create() сохраняет id нового потока, в переменную, которая имеет
       тип данных pthread_t. Этот идентификатор используется для последующих вызовов других функций pthreads.
       В случае успеха, pthread_create() возвращает 0, в случае ошибки возвращает код ошибки, и содержимое переменной
       с типом данных pthread_t неопределенно.

       Ошибки:
              EAGAIN - системе не хватает ресурсов для создания нити.
              EINVAL - один из параметров функции имеет не валидное значение.
              EPERM - мы не имеем полномочий для исполнения нити с заданными атрибутами.

       Атрибуты потока:
              scope : Допустимые значения - PTHREAD_SCOPE_SYSTEM и PTHREAD_SCOPE_PROCESS
              PTHREAD_SCOPE_SYSTEM - нить планируется системным планировщиком и соревнуется за системные ресурсы с другими процессами.
              PTHREAD_SCOPE_PROCESS(значение по умолчанию) - нить планируется пользовательским планировщиком и, с точки зрения системы, считается частью своего процесса.

              detachstate : Допустимые значения - PTHREAD_CREATE_JOINABLE и PTHREAD_CREATE_DETACHED.
              PTHREAD_CREATE_DETACHED - у нитей в этом состоянии, ресурсы освобождаются сразу после завершения нити. 
              PTHREAD_CREATE_JOINABLE(значение по умолчанию) - для того чтобы ресурсы нити были освобождены, нужно
              сделать pthread_join в другой нити.

              stackaddr : Допустимые значения - NULL или указатель на область памяти, достаточную для размещения стэка. 
              Если мы укажем NULL, то система сама задаст
              адрес начала стэка.

              stacksize : Допустимые значения - 0 или размер стека в байтах. 
              Если 0, то значение стэка выставляется системой. 
              Если мы указываем значение стэка в байтах, то надо учитывать параметр PTHREAD_STACK_MIN - если мы укажем
              размер стэка меньше чем это значение, то программа может завершиться аварийно.

              priority : По умолчанию стоит значение 0. Нить имеет приоритет 0.

              inhetisched : Допустимые значения – PTHREAD_INHERIT_SCHED и PTHREAD_EXPLICIT_SCHED.
              PTHREAD_EXPLICIT_SCHED(значение по умолчанию) - нить не наследует приоритет родителя. , т.е.
              класс планирования и приоритет создаваемой нити должны быть указаны явно в атрибуте shedparam.

              PTHREAD_INHERIT_SCHED - нить наследует класс планирования и приоритет от родительской нити.

              schedpolicy : Допустимые значения – SCHED_FIFO, SCHED_RR и SCHED_OTHER.
              
              SCHED_OTHER(Значение по умолчанию) - Нить использует фиксированные приоритеты, задаваемые ОС
              SCHED_FIFO, SCHED_RR - эти политики используется процессами реального времени.

pthread_exit(void *retval):
       The pthread_exit() завершает поток, который эту функцию вызывает и возвращает значение через переменную retval
       (если поток является "joinable"). Эта переменная доступна другому потоку в том же самом процессе, который
       вызывает pthread_join(). После вызова pthread_exit, данные специфичные для нити и стэк нити освобождаются и 
       соответствующая память, которая использовалась данной нитью, может быть использована другой нитью.

       Ошибки: 
              Эта функция всегда выполняется успешно.

perror(const char *s):
       Эта функция выдаёт сообщение в стандартный поток ошибок, описывающее последнюю ошибку, 
       обнаруженную во время вызова системной или библиотечной функции.
       Если её аргумент s не NULL *s - не нулевой байт, сначала печатается s после неё выводится двоиточие и пробел
       , а затем уже следует описание ошибки, которая относится к конкретному значению переменной errno и затем
       символ новой линии.
       errno - номер последней ошибки. Эта переменная определена как целое значение в заголовочном файле <errno.h>,
       она устанавливается системными вызовами и некоторомы библиотечными функциями в момент ошибки, чтобы указать,
       что пошло не так.

       Большинство функций pthreads возвращает 0 в случае успеха, и номер ошибки в случае ошибки.
       Эти номера ошибок совпадают с номера ошибок, которые записываются в errno системными вызовами и некоторыми 
       библиотечными функциями в момент ошибки, но фукнции pthreads не устанавливают переменную errno, поэтому
       мы должны устанавливать её самостоятельно. Более того, для каждого потока, переменная errno своя.
       Это сделано для того чтобы идентифицировать разные ошибки в разных потоках. Также мы можем использовать
       фукнцию perror() в потоках, так как она потока безопасная. Потока безопасные функции - это те функции, 
       которые могут быть вызваны из многих потоков в одно и то же время.
