Что такое семафоры?

Семафоры это один из первых примитивов синхронизации, представляет он из себя
счётчик, для которого определены две основные операции sem_post() и sem_wait()
Т.е. одна из них увеличивает счётчик на единицу, другая уменьшает счётчик на единицу.
Более подробно я их опишу ниже.

Когда мы говорим про мьютекс, у мьютекс обязательно есть владелец(поток, который его захватил, должен его разблокировать)
У семафора владельца нет, он не привязан ни к потоку, ни к процессу.

Т.е. возможна такая схема работы с семафорами, что один поток лочит семафор, а другой его анлочит.

Также мы можем использовать наш семафор как мьютекс:
sem_init(sem, 0, 1);

// Такой код будет написан во всех потоках
sem_wait(&sem)
//critical section
sem_post(&sem);


int sem_init(sem_t *sem, int pshared, unsigned int value);
    Description:
        sem_init() инициализирует безымянный семафор по адресу, на который указывает sem. 
        Аргумент value указывает начальное значение семафора.
        Аргумент pshared указывает, должен ли этот семафор использоваться совместно потоками процесса или между процессами.
        Если pshared имеет значение 0, то семафор используется совместно потоками процесса и должен располагаться по некоторому 
        адресу, который виден всем потокам (например, глобальная переменная или переменная, динамически выделяемая в куче).

        Если pshared не равен нулю, то семафор является общим для процессов и должен располагаться в области разделяемой памяти

        Return value:
            В случае успеха 0, -1 в случае успеха и переменная errno устанавливается

        ERRORS:
            EINVAL - value превышает SEM_VALUE_MAX
            ENOSYS - pshared не ноль, но система не поддерживает семафоры, которые разделяемые между процессами.

int sem_destroy(sem_t *sem);
    Description:
        sem_destroy() уничтожает безымянный семафор по адресу, на который указывает sem.
        Уничтоженные семафор можно повторно проинициализировать.
           
    Return value:
        В случае успеха 0, -1 в случае успеха и переменная errno устанавливается

    ERRORS:
        EINVAL - sem не валидный семафор

int sem_post(sem_t *sem);
    Description:
        sem_post() увеличивает (разблокирует) семафор, на который указывает sem.
        Если значение семафора становится больше нуля,
        тогда другой процесс или поток, заблокированный вызовом sem_wait(3), 
        будет разбужен и продолжит блокировку семафора.

        sem_post можно делать не на тот семафор, на который данным потоком
        был сделан sem_wait

        sem_post и sem_wait можно делать несколько раз одним потоком без
        предварительной блокировки/разблокировки.

    Return value:
        В случае успеха 0, в случае неуспеха -1 и значение семафора остаётся неизменным
        и устанавливается переменная errno

    ERRORS:
        EINVAL - sem не валидный
        EOVERFLOW - максимально допустимое значение для семафора превышено.

int sem_wait(sem_t *sem);
    Description:
        sem_wait() уменьшает (блокирует) семафор, на который указывает sem. 
        Если значение семафора больше нуля, то продолжается уменьшение, и функция немедленно возвращается. 
        Если семафор в настоящее время имеет нулевое значение, 
        то вызов блокируется до тех пор, пока либо не станет возможным выполнить декремент 
        (т. е. значение семафора не поднимется выше нуля), либо обработчик сигнала не прервет вызов.

    Return value:
        В случае успеха 0, в случае неуспеха -1 и значение семафора остаётся неизменным
        и устанавливается переменная errno
    
    ERRORS:
        EINVAL - sem не валидный
        EINTR - вызов был прерван обработчиком сигнала

